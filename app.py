# app.py - OptiFin (Full launch-ready Streamlit app)
# Author: generated by assistant
# Notes: Optional OpenAI integration via st.secrets["OPENAI_API_KEY"]

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import io
import xlsxwriter
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import textwrap
import datetime
import openai
import math
import urllib.parse

# ---------------- PAGE CONFIG & BRANDING ----------------
APP_TITLE = "OptiFin"
TAGLINE = "Your Wealth, Optimized."
LOGO_PLACEHOLDER_TEXT = "OPTIFIN"
BG_GRADIENT = "linear-gradient(180deg, #f5f7fb 0%, #ffffff 100%)"

st.set_page_config(page_title=APP_TITLE, page_icon="ðŸ’¼", layout="wide")

# ---------------- CSS & STYLES: content box for readability ----------------
st.markdown(
    f"""
    <style>
    /* Page background */
    .stApp {{
        background: {BG_GRADIENT};
    }}
    /* Main content card */
    .content-card {{
        background: rgba(255,255,255,0.98);
        padding: 18px;
        border-radius: 10px;
        box-shadow: 0 6px 18px rgba(20,20,40,0.06);
    }}
    .muted {{ color: #666; font-size:0.95rem; }}
    .brand-title {{ font-size:20px; font-weight:800; color:#0b2540; }}
    .brand-sub {{ color:#0b2540; font-size:0.95rem; }}
    .insight-card {{
        background: linear-gradient(180deg,#ffffff,#fbfbff);
        border-left: 4px solid #0b5fff;
        padding: 12px;
        border-radius: 8px;
    }}
    .small-note {{ font-size:0.9rem; color:#444; }}
    .btn-primary>button {{ background-color: #0b2540; color: white; border-radius: 8px; font-weight:700; padding:8px 12px; }}
    .download-btn>button {{ background-color: #caa84a; color: #111; border-radius: 8px; font-weight:700; padding:8px 12px; }}
    input[type="text"] {{ padding: 8px; font-size: 1rem; }}
    textarea {{ font-size: 1rem; }}
    </style>
    """,
    unsafe_allow_html=True,
)

# ---------------- SESSION STATE: navigation and persistence ----------------
if "page" not in st.session_state:
    st.session_state.page = "privacy"  # privacy gate first
if "privacy_accepted" not in st.session_state:
    st.session_state.privacy_accepted = False
if "user_type" not in st.session_state:
    st.session_state.user_type = None
if "service_choice" not in st.session_state:
    st.session_state.service_choice = None
if "inputs_individual" not in st.session_state:
    st.session_state.inputs_individual = {}
if "inputs_household" not in st.session_state:
    st.session_state.inputs_household = {}
if "inputs_business" not in st.session_state:
    st.session_state.inputs_business = {}
if "advice_text" not in st.session_state:
    st.session_state.advice_text = ""
if "lead" not in st.session_state:
    st.session_state.lead = {}

# ---------------- UTIL: parse numeric typed strings ----------------
def parse_num(s):
    """Parse a user-provided numeric string into float; return 0.0 on empty/invalid."""
    if s is None:
        return 0.0
    try:
        # remove commas, currency symbols, spaces
        cleaned = str(s).replace(",", "").replace("R", "").replace("ZAR", "").strip()
        if cleaned == "":
            return 0.0
        return float(cleaned)
    except Exception:
        return 0.0

# ---------------- UTIL: check OpenAI availability ----------------
def openai_available():
    return bool(st.secrets.get("OPENAI_API_KEY", ""))

def safe_call_openai(prompt, max_tokens=400, temp=0.2):
    key = st.secrets.get("OPENAI_API_KEY", "")
    if not key:
        raise RuntimeError("OpenAI key not set")
    openai.api_key = key
    resp = openai.Completion.create(engine="text-davinci-003", prompt=prompt, max_tokens=max_tokens, temperature=temp)
    return resp.choices[0].text.strip()

# ---------------- PRIVACY AGREEMENT PAGE ----------------
def page_privacy():
    st.markdown("<div class='content-card'>", unsafe_allow_html=True)
    st.markdown(f"<div style='display:flex; gap:12px; align-items:center'><div class='brand-title'>{LOGO_PLACEHOLDER_TEXT}</div><div class='brand-sub'>{APP_TITLE} â€” {TAGLINE}</div></div>", unsafe_allow_html=True)
    st.markdown("---")
    st.markdown("<h3>Privacy & Data Agreement</h3>", unsafe_allow_html=True)
    st.markdown(
        """
        <div class="small-note">
        <p>To use OptiFin you must accept our Privacy & Data Agreement. Please read carefully:</p>
        <ul>
            <li>Your inputs are stored securely and used to generate personalized financial recommendations and reports.</li>
            <li>OptiFin will not sell your personal data. Aggregated anonymised data may be used to improve services.</li>
            <li>Advice on this platform is informational and does not substitute professional implementation. OptiFin is not liable for outcomes from implementation unless agreed contractually.</li>
            <li>Clicking "Accept & Continue" is a legal acknowledgement of this agreement.</li>
        </ul>
        </div>
        """,
        unsafe_allow_html=True,
    )

    accepted = st.checkbox("I have read and ACCEPT the Privacy & Data Agreement", key="privacy_accept_chk")
    c1, c2 = st.columns([1,1])
    with c1:
        if st.button("Accept & Continue", key="privacy_accept_btn"):
            if accepted:
                st.session_state.privacy_accepted = True
                st.session_state.page = "home"
                # refresh to show next page
                st.rerun()
            else:
                st.warning("Please check the box to accept before continuing.")
    with c2:
        if st.button("Decline & Exit", key="privacy_decline_btn"):
            st.stop()
    st.markdown("</div>", unsafe_allow_html=True)

# ---------------- HOME PAGE ----------------
def page_home():
    st.markdown("<div class='content-card'>", unsafe_allow_html=True)
    st.markdown(f"<div style='display:flex; justify-content:space-between; align-items:center'><div><div class='brand-title'>{LOGO_PLACEHOLDER_TEXT}</div><div class='brand-sub'>{APP_TITLE} â€” {TAGLINE}</div></div><div class='small-note'>Built for clarity & privacy</div></div>", unsafe_allow_html=True)
    st.markdown("---")
    st.markdown("<h3>How can OptiFin help you today?</h3>", unsafe_allow_html=True)
    st.markdown("<div class='small-note'>Describe your situation in plain English or choose your category below.</div>", unsafe_allow_html=True)
    # NLP query (plain input) - unique key
    query = st.text_input("Ask OptiFin (plain English):", placeholder="e.g., 'I earn R420k/year and pay R30k in deductions' or 'I run a bakery with R2m revenue' ", key="home_query")
    col_detect = st.columns([1,1,1])
    if col_detect[0].button("Detect & Continue", key="home_detect_btn"):
        detected = detect_user_type(query)
        st.session_state.user_type = detected
        st.session_state.page = "service"
        st.rerun()
    # manual buttons with unique keys
    c1, c2, c3 = st.columns([1,1,1])
    with c1:
        if st.button("Individual", key="home_btn_ind"):
            st.session_state.user_type = "individual"
            st.session_state.page = "service"
            st.rerun()
    with c2:
        if st.button("Household", key="home_btn_hh"):
            st.session_state.user_type = "household"
            st.session_state.page = "service"
            st.rerun()
    with c3:
        if st.button("Business", key="home_btn_bus"):
            st.session_state.user_type = "business"
            st.session_state.page = "service"
            st.rerun()
    st.markdown("</div>", unsafe_allow_html=True)

# ---------------- NATURAL-LANGUAGE ROUTING ----------------
def detect_user_type(text):
    text_l = (text or "").lower()
    # If OpenAI available, try classification
    if openai_available() and text.strip():
        try:
            prompt = f"Classify this short financial query as one of: individual, household, business. Query: {text}\nReturn exactly one word."
            out = safe_call_openai(prompt, max_tokens=6, temp=0.0)
            out = out.strip().lower()
            if out in ("individual","household","business"):
                return out
        except Exception:
            pass
    # fallback rules
    if any(k in text_l for k in ["business", "company", "employees", "revenue", "profit", "expenses"]):
        return "business"
    if any(k in text_l for k in ["household", "family", "kids", "children", "home", "spouse", "partner"]):
        return "household"
    return "individual"

# ---------------- SERVICE SELECTION PAGE ----------------
def page_service():
    st.markdown("<div class='content-card'>", unsafe_allow_html=True)
    st.title(f"{st.session_state.user_type.capitalize()} â€” Choose Service")
    st.markdown("<div class='small-note'>Pick the objective so we can ask targeted questions.</div>", unsafe_allow_html=True)
    service = st.selectbox("What would you like to do?", options=["Invest", "Tax Optimization", "Cashflow & Budget", "Full Growth Plan"], index=0, key="service_select")
    if st.button("Continue to Questions", key="service_continue_btn"):
        st.session_state.service_choice = service
        st.session_state.page = "questions"
        st.rerun()
    st.markdown("</div>", unsafe_allow_html=True)

# ---------------- QUESTIONS PAGE (per flow) ----------------
def page_questions():
    ut = st.session_state.user_type
    svc = st.session_state.service_choice or "Invest"
    st.markdown("<div class='content-card'>", unsafe_allow_html=True)
    st.title(f"{ut.capitalize()} â€” {svc} Questions")

    # Contact capture
    st.subheader("Contact (we'll use this to create your report)")
    name = st.text_input("Full name", key="q_name", value=st.session_state.lead.get("name",""))
    email = st.text_input("Email", key="q_email", value=st.session_state.lead.get("email",""))
    phone = st.text_input("Phone (optional)", key="q_phone", value=st.session_state.lead.get("phone",""))

    st.markdown("---")

    # Collect inputs using text fields (no +/-), parse later
    if ut == "individual":
        st.subheader("Individual Financial Details")
        income_s = st.text_input("Annual Gross Income (enter number, R)", key="ind_income", value=str(st.session_state.inputs_individual.get("Income","")))
        deductions_s = st.text_input("Annual Deductions (R)", key="ind_deductions", value=str(st.session_state.inputs_individual.get("Deductions","")))
        retirement_age = st.selectbox("Planned retirement age", options=[55,60,65,70], index=1, key="ind_ret_age")
        dependents = st.number_input("Number of Dependents", min_value=0, step=1, key="ind_dependents")
        investments_s = st.text_input("Current investable assets (R)", key="ind_investable", value=str(st.session_state.inputs_individual.get("Investable","")))
        notes = st.text_area("Notes (e.g., monthly/annual specification)", key="ind_notes", value=st.session_state.inputs_individual.get("Notes",""))

        # Save typed strings
        st.session_state.inputs_individual = {
            "Income": income_s,
            "Deductions": deductions_s,
            "Retirement Age": retirement_age,
            "Dependents": int(dependents),
            "Investable": investments_s,
            "Notes": notes
        }

    elif ut == "household":
        st.subheader("Household Financial Details")
        hh_income_s = st.text_input("Household Annual Income (R)", key="hh_income", value=str(st.session_state.inputs_household.get("Household Income","")))
        children = st.number_input("Number of Children", min_value=0, step=1, key="hh_children", value=int(st.session_state.inputs_household.get("Children",0) or 0))
        household_deductions_s = st.text_input("Total Household Deductions (R)", key="hh_deductions", value=str(st.session_state.inputs_household.get("Deductions","")))
        education_costs_s = st.text_input("Annual education/childcare costs (R)", key="hh_edu", value=str(st.session_state.inputs_household.get("Education","")))
        mortgage_s = st.text_input("Annual mortgage/rent (R)", key="hh_mortgage", value=str(st.session_state.inputs_household.get("Housing","")))
        notes = st.text_area("Notes", key="hh_notes", value=st.session_state.inputs_household.get("Notes",""))

        st.session_state.inputs_household = {
            "Household Income": hh_income_s,
            "Children": int(children),
            "Deductions": household_deductions_s,
            "Education": education_costs_s,
            "Housing": mortgage_s,
            "Notes": notes
        }

    else:  # business
        st.subheader("Business Financial Details")
        revenue_s = st.text_input("Annual Revenue (R)", key="bus_revenue", value=str(st.session_state.inputs_business.get("Revenue","")))
        expenses_s = st.text_input("Annual Expenses (R)", key="bus_expenses", value=str(st.session_state.inputs_business.get("Expenses","")))
        employees = st.number_input("Number of Employees", min_value=0, step=1, key="bus_employees", value=int(st.session_state.inputs_business.get("Employees",0) or 0))
        business_type = st.selectbox("Business Type", options=["Sole Proprietorship","Private Company","Partnership","Other"], index=1, key="bus_type")
        owner_draw_s = st.text_input("Owner remuneration last 12 months (R)", key="bus_owner_draw", value=str(st.session_state.inputs_business.get("Owner Draw","")))
        tax_paid_s = st.text_input("Tax paid last year (R)", key="bus_tax_paid", value=str(st.session_state.inputs_business.get("Tax Paid","")))
        notes = st.text_area("Notes", key="bus_notes", value=st.session_state.inputs_business.get("Notes",""))

        st.session_state.inputs_business = {
            "Revenue": revenue_s,
            "Expenses": expenses_s,
            "Employees": int(employees),
            "Business Type": business_type,
            "Owner Draw": owner_draw_s,
            "Tax Paid": tax_paid_s,
            "Notes": notes
        }

    # persist lead basic info
    st.session_state.lead.update({"name": name, "email": email, "phone": phone})

    st.markdown("---")
    c1, c2 = st.columns([1,1])
    with c1:
        if st.button("Generate Advice & View Results", key="q_generate_btn"):
            st.session_state.page = "results"
            st.rerun()
    with c2:
        if st.button("Save & Continue to Results (no advice)", key="q_save_btn"):
            st.session_state.page = "results"
            st.rerun()
    st.markdown("</div>", unsafe_allow_html=True)

# ---------------- ADVICE ENGINE: OpenAI + deterministic fallback ----------------
def generate_advice(user_type, inputs_dict, service):
    """Return advice string. Uses OpenAI if API key present; otherwise deterministic fallback."""
    # Convert stored string inputs into numeric where appropriate
    # Build a clean inputs dict with numeric conversion
    cleaned = {}
    for k, v in inputs_dict.items():
        if isinstance(v, str):
            cleaned[k] = parse_num(v)
            if cleaned[k] == 0.0 and v.strip() != "":
                # If parse failed (e.g., text), keep original
                cleaned[k] = v
        else:
            cleaned[k] = v

    # Build prompt and call OpenAI if available
    context = st.session_state.get("market_context", "Current market: diversified, cautious allocation recommended.")
    prompt_header = f"User type: {user_type}\nService: {service}\nMarket context: {context}\nUser inputs:\n"
    for k, v in cleaned.items():
        prompt_header += f"- {k}: {v}\n"
    prompt = (
        prompt_header
        + "\nAs a professional financial advisor, provide 4 concise, practical recommendations (no step-by-step legal filings) "
          "and include conservative estimates of potential impact where sensible. End with a call-to-action to contact OptiFin for implementation."
    )

    if openai_available():
        try:
            out = safe_call_openai(prompt, max_tokens=400, temp=0.15)
            return out
        except Exception:
            # silently fallback
            pass

    # Deterministic fallback logic (meaningful but non-actionable)
    return deterministic_advice(user_type, cleaned, service)

def deterministic_advice(user_type, cleaned_inputs, service):
    def money(x):
        try:
            return f"R {float(x):,.0f}"
        except Exception:
            return str(x)
    adv = []
    if user_type == "individual":
        income = float(cleaned_inputs.get("Income", 0) or 0)
        ded = float(cleaned_inputs.get("Deductions", 0) or 0)
        investable = float(cleaned_inputs.get("Investable", 0) or 0)
        adv.append(f"Prioritise tax-efficient savings (retirement accounts & tax-free vehicles). Redirecting just 5% of income (~{money(0.05*income)}) to tax-advantaged accounts can reduce taxable income.")
        adv.append("Adopt a low-cost diversified ETF core and rebalance annually â€” this reduces fees and tail risk compared to active concentrated bets.")
        adv.append("Build / maintain an emergency fund covering 3â€“6 months of essential expenses before pursuing risky allocations.")
        adv.append("Contact OptiFin for a tailored tax-credit audit and implementation plan; we will model expected annual savings.")
    elif user_type == "household":
        hh = float(cleaned_inputs.get("Household Income",0) or 0)
        kids = int(cleaned_inputs.get("Children",0) or 0)
        adv.append(f"Maintain 3â€“6 months emergency savings and leverage tax-efficient accounts for education/retirement.")
        if kids > 0:
            adv.append("Explore child/education savings schemes and tax credits to reduce net household costs over time.")
        else:
            adv.append("Consider spousal income-splitting and maximise retirement contributions to reduce household tax.")
        adv.append("Balance growth exposure with inflation-protected assets given macro uncertainty.")
        adv.append("Contact OptiFin for a household audit; we'll model savings opportunities and next steps.")
    else:  # business
        rev = float(cleaned_inputs.get("Revenue",0) or 0)
        exp = float(cleaned_inputs.get("Expenses",0) or 0)
        profit = rev - exp
        adv.append("Ensure robust bookkeeping and a dedicated business card for deductible expenses â€” this increases valid deductions and reduces audit risk.")
        adv.append("Review owner remuneration strategy (salary vs dividends) and retirement schemes to optimise tax treatment.")
        adv.append("Implement expense categorisation and controls to capture all allowable deductions.")
        adv.append("Contact OptiFin's corporate team for a modeled tax-optimization plan and potential savings estimate.")
    return "\n\n".join(adv)

# ---------------- RESULTS PAGE (chart + insight box + export) ----------------
def page_results():
    ut = st.session_state.user_type
    svc = st.session_state.service_choice or ""
    st.markdown("<div class='content-card'>", unsafe_allow_html=True)
    st.title(f"{ut.capitalize()} â€” Results")

    # Choose correct inputs object
    if ut == "individual":
        raw_inputs = st.session_state.inputs_individual
    elif ut == "household":
        raw_inputs = st.session_state.inputs_household
    else:
        raw_inputs = st.session_state.inputs_business

    # produce cleaned numeric mapping for charts
    numeric_map = {}
    for k, v in raw_inputs.items():
        if isinstance(v, (int, float)):
            numeric_map[k] = v
        else:
            numeric_map[k] = parse_num(v)

    # generate advice if not precomputed
    if not st.session_state.advice_text:
        st.session_state.advice_text = generate_advice(ut, raw_inputs, svc)

    # Layout: small left column (chart) and right small insight box
    col_left, col_right = st.columns([2,1])
    with col_left:
        st.subheader("Compact Financial Trend")
        # Create small line chart: we plot the numeric_map values in stable order
        labels = list(numeric_map.keys())
        values = [numeric_map[k] for k in labels]
        # If there are many labels, limit to first 6 for clarity
        if len(labels) > 6:
            labels = labels[:6]
            values = values[:6]
        fig, ax = plt.subplots(figsize=(5,2.2))
        x = np.arange(len(labels))
        ax.plot(x, values, marker='o', linewidth=1.5)
        ax.set_xticks(x)
        ax.set_xticklabels(labels, rotation=20, fontsize=9)
        ax.yaxis.set_major_formatter(FuncFormatter(lambda v, _: f"R {v:,.0f}"))
        ax.grid(axis='y', linestyle='--', linewidth=0.4, alpha=0.6)
        plt.tight_layout()
        st.pyplot(fig, clear_figure=True)

    with col_right:
        st.subheader("Smart Insights")
        st.markdown("<div class='insight-card'>", unsafe_allow_html=True)
        # show top 3 bullets from advice (split by double newline or sentences)
        adv_text = st.session_state.advice_text or "No advice generated."
        # Try to split into bullets for neat display
        bullets = []
        if "\n\n" in adv_text:
            bullets = adv_text.split("\n\n")
        elif "\n" in adv_text:
            bullets = adv_text.split("\n")
        else:
            # fallback: split into sentences (naive)
            bullets = [s.strip() for s in adv_text.split(". ") if s.strip()]
        # show up to 4 bullets and keep them short
        for i, b in enumerate(bullets[:4]):
            st.markdown(f"**â€¢** {b.strip()}")
        st.markdown("---")
        st.markdown("<div class='small-note'>These are high-level insights. For full implementation and precise savings estimates contact OptiFin.</div>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)

    st.markdown("---")
    st.subheader("Full Advice")
    st.write(adv_text)

    # Exports (PDF / Excel)
    st.markdown("---")
    st.subheader("Branded Exports")
    c1, c2 = st.columns([1,1])
    with c1:
        pdf_bytes = build_branded_pdf(ut, raw_inputs, adv_text, st.session_state.lead)
        st.download_button("Download Branded PDF", data=pdf_bytes, file_name=f"OptiFin_Report_{ut}.pdf", key="download_pdf")
    with c2:
        xlsx_bytes = build_styled_excel(ut, raw_inputs, adv_text)
        st.download_button("Download Branded Excel", data=xlsx_bytes, file_name=f"OptiFin_Report_{ut}.xlsx", key="download_xlsx")

    # Contact capture & lead summary
    st.markdown("---")
    st.subheader("Contact & Next Steps")
    lead_name = st.text_input("Contact name", value=st.session_state.lead.get("name",""), key="lead_name_input")
    lead_email = st.text_input("Contact email", value=st.session_state.lead.get("email",""), key="lead_email_input")
    lead_notes = st.text_area("Notes for our team", value=st.session_state.lead.get("notes",""), key="lead_notes_input")
    if st.button("Save Lead & Generate Contact Summary PDF", key="lead_save_btn"):
        st.session_state.lead.update({"name": lead_name, "email": lead_email, "notes": lead_notes, "user_type": ut, "service": svc})
        summary_pdf = build_contact_summary_pdf(ut, raw_inputs, adv_text, st.session_state.lead)
        st.download_button("Download Contact Summary PDF", data=summary_pdf, file_name="OptiFin_Contact_Summary.pdf", key="download_contact_summary")
    st.markdown("</div>", unsafe_allow_html=True)

# ---------------- EXPORT: Branded PDF & Excel ----------------
def build_branded_pdf(user_type, inputs_raw, advice, lead):
    """Create a one-page branded PDF with OptiFin letterhead."""
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    # Header / letterhead
    c.setFillColorRGB(0.07, 0.15, 0.28)  # deep blue
    c.rect(0, height - 72, width, 72, fill=1, stroke=0)  # header bar
    c.setFillColorRGB(1, 1, 1)
    c.setFont("Helvetica-Bold", 20)
    c.drawString(40, height - 48, LOGO_PLACEHOLDER_TEXT)
    c.setFont("Helvetica", 10)
    c.drawString(40, height - 64, f"{APP_TITLE} â€” {TAGLINE}")

    # Footer
    c.setFillColorRGB(0.2, 0.2, 0.2)
    footer_text = f"OptiFin Confidential â€¢ Generated: {datetime.date.today().isoformat()}"
    c.setFont("Helvetica", 8)
    c.drawString(40, 30, footer_text)

    # Body
    y = height - 100
    c.setFillColorRGB(0, 0, 0)
    c.setFont("Helvetica-Bold", 12)
    c.drawString(40, y, f"Client: {lead.get('name','(not provided)')}")
    c.setFont("Helvetica", 10)
    c.drawString(300, y, f"User Type: {user_type.capitalize()}")
    y -= 18
    c.setFont("Helvetica-Bold", 11)
    c.drawString(40, y, "Inputs:")
    y -= 12
    c.setFont("Helvetica", 10)
    for k, v in inputs_raw.items():
        # avoid very long
        text_line = f"{k}: {v}"
        c.drawString(45, y, text_line[:100])
        y -= 12
        if y < 110:
            c.showPage()
            y = height - 100
    y -= 6
    c.setFont("Helvetica-Bold", 11)
    c.drawString(40, y, "High-level Advice:")
    y -= 14
    c.setFont("Helvetica", 10)
    for line in textwrap.wrap(advice, width=85):
        c.drawString(45, y, line)
        y -= 12
        if y < 90:
            c.showPage()
            y = height - 100
    c.save()
    pdf = buffer.getvalue()
    buffer.close()
    return pdf

def build_styled_excel(user_type, inputs_raw, advice):
    out = io.BytesIO()
    wb = xlsxwriter.Workbook(out, {'in_memory': True})
    # formats
    fmt_title = wb.add_format({'bold': True, 'font_size': 16})
    fmt_header = wb.add_format({'bold': True, 'bg_color': '#EDE7D9'})
    fmt_money = wb.add_format({'num_format': '#,##0.00', 'align': 'left'})
    fmt_wrap = wb.add_format({'text_wrap': True})
    # sheet
    ws = wb.add_worksheet("OptiFin Report")
    ws.set_column('A:A', 30)
    ws.set_column('B:B', 50)
    ws.write(0, 0, LOGO_PLACEHOLDER_TEXT, fmt_title)
    ws.write(1, 0, f"Report type: {user_type}")
    ws.write(3, 0, "Input", fmt_header)
    ws.write(3, 1, "Value", fmt_header)
    row = 4
    for k, v in inputs_raw.items():
        ws.write(row, 0, k)
        # try numeric
        val_num = parse_num(v) if isinstance(v, str) else v
        if isinstance(val_num, (int,float)) and not math.isnan(val_num):
            ws.write_number(row, 1, val_num, fmt_money)
        else:
            ws.write(row, 1, str(v))
        row += 1
    row += 1
    ws.write(row, 0, "Advice", fmt_header)
    ws.write(row, 1, advice, fmt_wrap)
    # branding sheet
    ws2 = wb.add_worksheet("Brand")
    ws2.write(0,0, APP_TITLE, fmt_title)
    ws2.write(1,0, TAGLINE)
    wb.close()
    return out.getvalue()

def build_contact_summary_pdf(user_type, inputs_raw, advice, lead):
    # Very similar to report PDF, slightly different header
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    c.setFillColorRGB(0.07, 0.15, 0.28)
    c.rect(0, height - 60, width, 60, fill=1, stroke=0)
    c.setFillColorRGB(1,1,1)
    c.setFont("Helvetica-Bold", 14)
    c.drawString(40, height - 42, LOGO_PLACEHOLDER_TEXT)
    c.setFont("Helvetica", 9)
    c.drawString(40, height - 58, f"Contact Summary â€¢ {datetime.date.today().isoformat()}")
    y = height - 90
    c.setFillColorRGB(0,0,0)
    c.setFont("Helvetica-Bold", 11)
    c.drawString(40, y, f"Lead: {lead.get('name','(not provided)')}")
    y -= 14
    c.setFont("Helvetica", 10)
    c.drawString(40, y, f"Email: {lead.get('email','')}")
    y -= 16
    c.drawString(40, y, "Inputs summary:")
    y -= 12
    for k, v in inputs_raw.items():
        c.drawString(45, y, f"{k}: {v}")
        y -= 12
        if y < 60:
            c.showPage(); y = height - 90
    y -= 6
    c.drawString(40, y, "Advice summary:")
    y -= 12
    for line in textwrap.wrap(advice, width=85):
        c.drawString(45, y, line)
        y -= 12
        if y < 60:
            c.showPage(); y = height - 90
    c.save()
    pdf = buffer.getvalue(); buffer.close()
    return pdf

# ---------------- MAIN NAVIGATION & APP RUN ----------------
def render_top_nav():
    # small top nav for convenience; unique keys
    col1, col2, col3, col4 = st.columns([1,1,1,3])
    with col1:
        if st.button("Home", key="topnav_home"):
            st.session_state.page = "home"
            st.rerun()
    with col2:
        if st.button("Service", key="topnav_service"):
            if st.session_state.user_type:
                st.session_state.page = "service"
                st.rerun()
            else:
                st.warning("Choose a category first from Home.")
    with col3:
        if st.button("Questions", key="topnav_questions"):
            if st.session_state.user_type:
                st.session_state.page = "questions"
                st.rerun()
            else:
                st.warning("Choose a category first from Home.")
    with col4:
        st.markdown(f"<div style='text-align:right; color:#444'><small>{APP_TITLE} â€¢ {TAGLINE}</small></div>", unsafe_allow_html=True)

def main():
    # if user hasn't accepted privacy agreement -> show privacy page
    if not st.session_state.privacy_accepted or st.session_state.page == "privacy":
        page_privacy()
        return

    # render top nav
    render_top_nav()

    # switch pages
    page = st.session_state.page
    if page == "home":
        page_home()
    elif page == "service":
        page_service()
    elif page == "questions":
        page_questions()
    elif page == "results":
        page_results()
    else:
        # default landing
        page_home()

if __name__ == "__main__":
    main()

# ---------------- Requirements ----------------
# Add the following to requirements.txt when deploying:
# streamlit
# pandas
# numpy
# matplotlib
# xlsxwriter
# reportlab
# openai
# Pillow
# requests
